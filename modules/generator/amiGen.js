var ec2 = require("ec2");

exports.generateAMI = function(instanceId, name, tag, callback) {
    // Create an instance of the AmazonEC2Client.
    var client = ec2.createClient(
        { key:      process.env["AWS_ACCESS_KEY_ID"]
        , secret:   process.env["AWS_SECRET_ACCESS_KEY"]
    });
    
    var newImageId;
	
    console.log('About to create image from ' + instanceId + ' with name ' + name);
    
    client.call("CreateImage", {
        InstanceId: instanceId,
        Description: "autogenerated " + name,
        Name: name
    }, function(response) {
        newImageId = response.imageId;
		console.log('requested AMI, waiting...');
		
        //tag the image...
        client.call("CreateTags", {
            "ResourceId.1": newImageId,
            "Tag.1.Key": "spec",
            "Tag.1.Value": tag
        }, function(response) {
            //tags done
			console.log('Tagged new AMI');
        });
        
        //finally terminate the instance...
        client.call("TerminateInstances", {
            InstanceId: instanceId
        }, function(response) {
            //terminated
			console.log('terminated image');
        });
    });

    //need to make sure the image is ready before we exit
    client.poll("DescribeImages", {
        "Filter.1.Name": "state", 
        "Filter.1.Value.1": "available",
        "Filter.2.Name": "name",
        "Filter.2.Value.1": name
    }, function(response) {
        var imageSet = response.imagesSet;
        return (imageSet.length > 0);
    });
    
	client.on("error", function (err) {
		if (err=="Error: connect Unknown system errno 10060") {
			//lets assume the timeout is on the poll.  In that case, (maybe) we can ignore the error
			console.log('Encountered ' + err + '.  Ignoring.');
		} else {
			callback('error generating ami - ' + err);
		}		
    });
	
    // When all of the Amazon Query API calls and polls complete, we know that our
    // Amazon EC2 instance is ready for use.
    client.on("end", function () {
       console.log("Created a new AMI with id: " + newImageId);
       callback(null, newImageId);
    });
    
    // Run the trasaction described above.
    client.execute();
};